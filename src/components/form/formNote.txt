/* Which type if form are here  : 

Text Input: Allows users to enter a single line of text, such as their name, email address, or username.

Textarea: Similar to a text input but allows users to enter multiple lines of text, such as for comments or a message.

Checkbox: Presents a list of options, and users can select one or multiple options by ticking the corresponding checkboxes.

Radio Button: Presents a list of options, and users can select only one option from the list.

Dropdown Select: Provides a dropdown menu with a list of options, and users can select one option from the menu.

File Upload: Enables users to upload files from their local device, such as images, documents, or videos.

Date Picker: Offers a calendar interface or dropdown menus to select a date or date range.

Number Input: Restricts input to numeric values, allowing users to enter numbers, such as for quantities or ages.

Password Input: Masks the entered text, commonly used for password or PIN inputs to enhance security.

Submit Button: Initiates the form submission process when clicked.
  */


  example of all types of form list 


  form>
  <label for="name">Name:</label>
  <input type="text" id="name" name="name" placeholder="Enter your name" required>
  
  <label for="email">Email:</label>
  <input type="email" id="email" name="email" placeholder="Enter your email address" required>
  
  <label for="message">Message:</label>
  <textarea id="message" name="message" placeholder="Enter your message"></textarea>
  
  <label for="gender">Gender:</label>
  <input type="radio" id="male" name="gender" value="male">
  <label for="male">Male</label>
  <input type="radio" id="female" name="gender" value="female">
  <label for="female">Female</label>
  
  <label for="age">Age:</label>
  <input type="number" id="age" name="age" min="18" max="99">
  
  <label for="avatar">Avatar:</label>
  <input type="file" id="avatar" name="avatar">
  
  <label for="dob">Date of Birth:</label>
  <input type="date" id="dob" name="dob">
  
  <input type="submit" value="Submit">
</form>


************************************************************************
Sure, here are the main differences between normal forms and React Hook Forms:

* **Normal forms use state management libraries like Redux or Context API to manage form state.** React Hook Forms uses the `useForm()` hook to manage form state. This makes it easier to create and manage forms, and it can improve performance.

* **Normal forms require more code to create and manage forms.** React Hook Forms uses hooks, which are a concise way to write React code. This makes it easier to create and manage forms, and it can improve readability and maintainability.

* **Normal forms are not as flexible as React Hook Forms.** React Hook Forms provides a number of hooks that make it easy to add validation, conditional rendering, and other features to forms. This makes it easier to create complex forms.

Here is a table that summarizes the key differences between normal forms and React Hook Forms:

 Normal Forms | React Hook Forms |

1.State management | State management libraries like Redux or Context API | `useForm()` hook 
2. Code required | More code | Less code |
3. Flexibility | Less flexible | More flexible |

Overall, React Hook Forms is a more modern and efficient way to create and manage forms in React. If you are looking for a way to create forms that are easy to write, maintain, and scale, then React Hook Forms is a good option.